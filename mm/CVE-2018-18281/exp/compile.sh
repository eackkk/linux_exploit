#!/bin/sh

# This should be a C compiler from an android "standalone toolchain" as
# documented at <https://developer.android.com/ndk/guides/standalone_toolchain>.
# Statically linking against glibc doesn't work here because for multithreaded
# code, glibc tries to use set_robust_list, which immediately causes the program
# to be killed by seccomp.
CC=$HOME/android-sdk/sa-tch/bin/clang

# Prepare shellcode - this can use any aarch64 toolchain.
# NOTE: We are changing the page-relative alignment of the shellcode, so normal
# aarch64 RIP-relative addressing doesn't work.
aarch64-linux-gnu-as arm_shellcode.s -o arm_shellcode.o
aarch64-linux-gnu-ld arm_shellcode.o -o arm_shellcode
aarch64-linux-gnu-objcopy --dump-section .text=arm_shellcode.bin arm_shellcode
xxd -i arm_shellcode.bin > arm_shellcode.h

$CC -pthread -o sched_test_arm sched_test.c -O2
$CC -o eviction eviction.c -O2
